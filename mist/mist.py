#!/usr/bin/env python
# -*- coding: utf-8 -*-
try:
    from logger import logging
except IOError as e:
    print "Impossibile inizializzare il logging, assicurarsi che il programma stia girando con i permessi di amministratore."
    import sys
    sys.exit()
# from sysMonitor import interfaces, RES_CPU, RES_RAM, RES_ETH, RES_WIFI, RES_HSPA, RES_TRAFFIC, RES_HOSTS
#from sysMonitor import interfaces#, RES_CPU, RES_RAM, RES_ETH, RES_WIFI, RES_TRAFFIC, RES_HOSTS
from checkSoftware import CheckSoftware
from optparse import OptionParser
from platform import system
from speedTester import SpeedTester
from sysProfiler import sysProfiler
from time import sleep

import gui_event
import os
import sys
import sysMonitor
import wx

from _generated_version import __version__, FULL_VERSION, __updated__


import mist_gui
logger = logging.getLogger()


def main(argv=None):
    '''Command line options.'''
    program_name = os.path.basename(sys.argv[0])
    program_version = __version__
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
#     program_license = "Copyright 2015 user_name (organization_name)                                            \
#                 Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc)#, description=program_license)
#         parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-c", "--check", dest="check", action="count", help="Fare solo la verifica del sistema, senza misura [default: %default]")
        parser.add_option("-m", "--measure", dest="measure", action="count", help="Fare una misura [default: %default]")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(check=False, measure=True)

        # process options
        (opts, args) = parser.parse_args(argv)
        
        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)

        mist()
        # MAIN BODY #
#        mist_cli = MistCli()
        # Register for events
        # Do profile
        # Do tests
        # (Send results?)
        # Ask if user wants to repeat


    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


def mist():
    version = __version__
    SWN = 'MisuraInternet Speed Test'
    logger.info('Starting %s v.%s' % (SWN, FULL_VERSION)) 
    
    app = wx.App(False)
    
    # Check if this is the last version
    version_ok = CheckSoftware(version).checkIT()
    #check = checker.checkIT()
    
    if not version_ok:
        return
    # Logs all network interfaces
    sysMonitor.interfaces()
    if (system().lower().startswith('win')):
        wx.CallLater(200, sleeper)
    GUI = mist_gui.mistGUI(None, -1, "", style = wx.DEFAULT_FRAME_STYLE) #& ~(wx.RESIZE_BORDER | wx.RESIZE_BOX))
    event_dispatcher = gui_event.WxGuiEventDispatcher(GUI)
    GUI.init_frame(version, event_dispatcher)
    app.SetTopWindow(GUI)
    GUI.Show()
    app.MainLoop()
 
def sleeper():
    sleep(.001)
    return 1 # don't forget this otherwise the timeout will be removed
  
  
  
  
if __name__ == "__main__":
    main()
