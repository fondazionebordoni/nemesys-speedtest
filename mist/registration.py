#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Apr 11 17:48:58 2012


from logger import logging
import urlparse
import hashlib
import httplib
import paths
import os
import wx

SWN = 'MisuraInternet Speed Test'

logger = logging.getLogger()

configurationServer = 'https://speedtest.agcom244.fub.it/Config'
MAXretry = 3 ## numero massimo di tentativi prima di chiudere la finestra ##


RegInfo = \
{ \
"style":wx.OK|wx.ICON_INFORMATION, \
"title":"Informazioni sulla registrazione", \
"message": \
'''
Verranno ora richieste le credenziali per l'attivazione.\n
Inserire i codici di accesso (username e password) che hai 
usato per accedere all'area personale di %s.\n
Al momento dell'inserimento si prega di verificare
la correttezza delle credenziali di accesso e di avere 
accesso alla rete.\n
Dopo %s tentativi falliti, sara' necessario riavviare
il programma per procedere nuovamente all'inserimento.
''' % (SWN, MAXretry)
}

RegSuccess = \
{ \
"style":wx.OK|wx.ICON_EXCLAMATION, \
"title":"%s Success" % SWN, \
"message":"\nUsername e password corrette e verificate." \
}

ErrorCode = \
{ \
"style":wx.OK|wx.ICON_ERROR, \
"title":"%s Error" % SWN, \
"message": \
'''
Le credenziali di accesso inserite sono errate.\n
Controllare la loro correttezza accedendo all'area 
personale sul sito www.misurainternet.it
'''
}

ErrorSave = \
{ \
"style":wx.OK|wx.ICON_ERROR, \
"title":"%s Error" % SWN, \
"message":"\nErrore nel salvataggio del file di configurazione." \
}

ErrorDownload = \
{ \
"style":wx.OK|wx.ICON_ERROR, \
"title":"%s Error" % SWN, \
"message":"\nErrore nel download del file di configurazione\no credenziali di accesso non corrette." \
}

ErrorRetry = \
{ \
"style":wx.OK|wx.ICON_ERROR, \
"title":"%s Error" % SWN, \
"message": \
'''
Il download del file di configurazione e' fallito per %s volte.\n
Riavviare il programma dopo aver verificato la correttezza
delle credenziali di accesso e di avere accesso alla rete.
''' % MAXretry
}

ErrorRegistration = \
{ \
"style":wx.OK|wx.ICON_ERROR, \
"title":"%s Registration Error" % SWN, \
"message": "\nQuesta copia di %s non risulta correttamente registrata." % SWN \
}


class Dialog(wx.Dialog):

  def __init__(self, parent, message, title, default, caption):
    #kwds["style"] = wx.DEFAULT_FRAME_STYLE
    wx.Dialog.__init__(self, None, -1, "")
    self.label_1 = wx.StaticText(self, -1, message, style=wx.ALIGN_CENTRE)
    self.label_username = wx.StaticText(self, -1, "Username:", style=wx.ALIGN_RIGHT)
    self.text_username = wx.TextCtrl(self, -1, default)
    self.label_password = wx.StaticText(self, -1, "Password:", style=wx.ALIGN_RIGHT)
    self.text_password = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
    self.button_1 = wx.Button(self, caption, "Accedi")

    self.__set_properties(title)
    self.__do_layout()

    self.Bind(wx.EVT_BUTTON, self.button_pressed, self.button_1)
    # end wxGlade

  def __set_properties(self, title):
    # begin wxGlade: MyFrame.__set_properties
    self.SetTitle(title)
    self.SetSize((300, 160))
    self.label_username.SetMinSize((80, 20))
    self.text_username.SetMinSize((180, 20))
    self.label_password.SetMinSize((80, 20))
    self.text_password.SetMinSize((180, 20))
    # end wxGlade

  def __do_layout(self):
    # begin wxGlade: MyFrame.__do_layout
    sizer_1 = wx.BoxSizer(wx.VERTICAL)
    sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
    sizer_3 = wx.BoxSizer(wx.HORIZONTAL)

    sizer_1.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

    sizer_2.Add(self.label_username, 0, 0, 0)
    sizer_2.Add(self.text_username, 0, 0, 0)
    sizer_1.Add(sizer_2, 1, wx.ALIGN_CENTER_HORIZONTAL, 8)

    sizer_3.Add(self.label_password, 0, 0, 0)
    sizer_3.Add(self.text_password, 0, 0, 0)
    sizer_1.Add(sizer_3, 1, wx.ALIGN_CENTER_HORIZONTAL, 8)

    sizer_1.Add(self.button_1, 0, wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 8)
    
    self.SetSizer(sizer_1)
    self.Layout()
    # end wxGlade

  def GetValue(self):
    return "%s|%s" % (self.text_username.GetValue(), hashlib.sha1(self.text_password.GetValue()).hexdigest())

  def button_pressed(self, event):  # wxGlade: MyDialog.<event_handler>
    self.EndModal(event.GetId())



def showDialog(dialog):
  msgBox = wx.MessageDialog(None, dialog['message'], dialog['title'], dialog['style'])
  msgBox.ShowModal()
  msgBox.Destroy()
  
def getconf(code, filepath, url):
  ## Scarica il file di configurazione dalla url (HTTPS) specificata, salvandolo nel file specificato. ##
  ## Solleva eccezioni in caso di problemi o file ricevuto non corretto. ##
  
  url = urlparse.urlparse(url)
  connection = httplib.HTTPSConnection(host=url.hostname)
  # Warning This does not do any verification of the server’s certificate. #

  connection.request('GET', '%s?clientid=%s' % (url.path, code))
  logger.debug("Dati inviati: %s" % code)

  data = connection.getresponse().read() 
  logger.debug("Dati ricevuti:\n%s" % data)
  
  # Controllo se nel file di configurazione è presente il codice di attivazione. #
  if (data.find(code) != -1 or data.find("username") != -1):
    data2file=open(filepath,'w')
    data2file.write(data)
  else:
    raise Exception('incorrect configuration file.')

  return os.path.exists(filepath)
  
def registration(code):
  if len(code) < 4:
    regOK = False
    logger.error("ClientID assente o di errata lunghezza")
    retry=0
    showDialog(RegInfo)
    for retry in range(MAXretry):
      ## Prendo un codice licenza valido sintatticamente  ##
      code = None
      logger.info('Tentativo di registrazione %s di %s' % (retry+1, MAXretry))
      message = "\nInserisci i codici di accesso (username e password)\nche hai usato per accedere all'area personale\n"
      title = "Tentativo %s di %s" % (retry+1, MAXretry)
      default = ""
      dlg = Dialog(None, message, title, default, wx.ID_OK)
      res = dlg.ShowModal()
      code = dlg.GetValue()
      dlg.Destroy()
      logger.info("Codici di accesso inseriti dall'utente: %s" % code)
      if (res != wx.ID_OK):
        logger.warning('Registration aborted at attemp number %d' %(retry+1))
        break
      
      filepath=paths.CONF_MAIN 
      try:
        if(code != None and len(code) > 4):
          # Prendo il file di configurazione. #
          regOK = getconf(code, filepath, configurationServer)
          if (regOK == True):
            logger.info('Configuration file successfully downloaded and saved')
            showDialog(RegSuccess)
            break
          else:
            logger.error('Configuration file not correctly saved')
            showDialog(ErrorSave)
        else:
          logger.error('Wrong username/password')
          showDialog(ErrorCode)
      except Exception as error:
        logger.error('Configuration file not downloaded or incorrect: %s' % error)
        showDialog(ErrorDownload)
      
      if not ( retry+1 < MAXretry ):
        showDialog(ErrorRetry)
        
    if not regOK:
      logger.info('Verifica della registrazione del software fallita')
      showDialog(ErrorRegistration)
    
  else:
    regOK = True
  
  return regOK

if __name__ == '__main__':
  app = wx.PySimpleApp(0)
  registration()
  #getconf('ab0cd1ef2gh3ij4kl5mn6op7qr8st9uv', './../config/client.conf', 'https://finaluser.agcom244.fub.it/Config')
